/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 /Users/kimsman/project/2025/ajou-pwd-2025/lumo-stage/client/public/wooden_mannequine/scene.gltf -o /Users/kimsman/project/2025/ajou-pwd-2025/lumo-stage/client/src/components/Mannequin.jsx 
Author: madeofmesh (https://sketchfab.com/madeofmesh)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/wooden-mannequin-lay-figure-rigged-f119f296833e4d4d9a8fc24dfc0533d6
Title: Wooden Mannequin (Lay Figure) - Rigged
*/

import React, { useEffect, useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import useStore from '../store';

export function Mannequin(props) {
  const { nodes, materials } = useGLTF('/wooden_mannequine/scene.gltf');
  const mannequinPose = useStore((state) => state.mannequinPose);
  const initializePose = useStore((state) => state.initializePose);
  const hasInitialized = useRef(false);

  useEffect(() => {
    // When the model loads, read its default pose and update the store
    if (nodes && !hasInitialized.current) {
      const initialPose = {};
      Object.keys(mannequinPose).forEach(boneName => {
        const bone = nodes[boneName];
        if (bone) {
          initialPose[boneName] = {
            x: bone.rotation.x,
            y: bone.rotation.y,
            z: bone.rotation.z,
          };
        }
      });
      initializePose(initialPose); // Update the store with the model's actual initial pose
      hasInitialized.current = true;
    }
  }, [nodes, initializePose, mannequinPose]);

  // On every frame, apply the rotations from the store to the bones
  useFrame(() => {
    // Ensure nodes are available before trying to manipulate them
    if (!nodes || !hasInitialized.current) return;

    Object.keys(mannequinPose).forEach(boneName => {
      const bone = nodes[boneName];
      if (bone) {
        const { x, y, z } = mannequinPose[boneName];
        bone.rotation.set(x, y, z);
      }
    });
  });

  // Use the original structure generated by gltfjsx to maintain correct orientation and scale
  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={2.329}>
        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <group position={[0, 97.263, 0]} rotation={[-Math.PI / 2, 0, 0]} scale={100}>
            <primitive object={nodes._rootJoint} />
            <skinnedMesh
              castShadow
              receiveShadow
              geometry={nodes.Object_9.geometry}
              material={materials.lay_figure_material}
              skeleton={nodes.Object_9.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/wooden_mannequine/scene.gltf');
